---
layout:     post
title:      "Node No.001"
subtitle:   "Node No.001"
date:       2020-01-05 17:21:00
author:     "Yanding"
header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
tags:
    - Web
    - Web前端
    - Node
---
## 1. Node开发概述
### 1.1 为什么要学习服务器端开发基础
+ 能够和后端程序员更加紧密的配合
+ 网站业务逻辑前置，学习前端技术需要后端技术支撑（Ajax）
+ 扩宽知识视野，能够站在更高的角度审视整个项目

## 1.2 服务器端开发要做的事情
+ 实现网站的业务逻辑
+ 数据的增删改查

## 1.3 为什么选择Node
+ 使用JavaScript语法开发后端应用
+ 一些公司要求前端工程师掌握Node开发
+ 生态系统活跃，有大量开源库可以使用
+ 前端开发工具大多基于Node开发

## 1.4 Node是什么
>Node是一个基于Chrome V8引擎的JavaScript代码运行环境。
![](/img/node/node01.jpg)

- 运行环境
	- 浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境
	- Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境

# 2. Node运行环境搭建
## 2.1 Node.js运行环境安装 
> node官网 [node官网](https://nodejs.org/en/)

+ LTS = Long Term Support 长期支持版 稳定版
+ Current 拥有最新特性 实验版

![](/img/node/node02.jpg)

## 2.2 Node环境安装失败解决办法 
1. 错误代号2502、2503:

	+ 失败原因：系统帐户权限不足。  
	+ 解决办法：  
		<step 1>. 以管理员身份运行powershell命令行工具  
    	<step 2>. 输入运行安装包命令 msiexec /package node安装包位置  
![](/img/node/node03.jpg)  
2. 执行命令报错

	+ 失败原因：Node安装目录写入环境变量失败  
	+ 解决办法：将Node安装目录添加到环境变量中  
![](/img/node/node04.jpg) 

## 2.3 PATH环境变量
存储系统中的目录，在命令行中执行命令的时候系统会自动去这些目录中查找命令的位置。
![](/img/node/node05.jpg) 

# 3. Node.js快速入门
## 3.1 Node.js 的组成
+ JavaScript 由三部分组成，ECMAScript，DOM，BOM。
+ Node.js是由ECMAScript及Node 环境提供的一些附加API组成的，包括文件、网络、路径等等一些更加强大的 API。
![](/img/node/node06.jpg) 
	```js
		var first = 'hello nodejs';
		console.log(first);
		
		function fn (){
			console.log('fn函数被调用了');
		}
		
		fn ();
		
		for (var i = 0; i <5; i ++) {
			console.log(i);
		}
		
		if (true){
			console.log('123');
		}
		
		console.log('文件被修改了')
	```

## 3.2 Node.js基础语法
> 所有ECMAScript语法在Node环境中都可以使用。  
> 在Node环境下执行代码，使用Node命令执行后缀为.js的文件即可  
![](/img/node/node07.jpg) 


## 3.3 Node.js全局对象global
> 在浏览器中全局对象是window，在Node中全局对象是global。
> Node中全局对象下有以下方法，可以在任何地方使用，global可以省略。  
 
console.log()     在控制台中输出
setTimeout()     设置超时定时器
clearTimeout()  清除超时时定时器
setInterval()      设置间歇定时器
clearInterval()   清除间歇定时器  

	global.console.log('我是global对象下面的console.log方法输出的内容');
	
	global.setTimeout(function (){
		console.log('123');
	}, 2000)
	
	console.log('我是global对象下面的console.log方法输出的内容');
	
	setTimeout(function (){
		console.log('123');
	}, 2000)


# 4. Node.js模块化开发
## 4.1 JavaScript开发弊端

> JavaScript在使用时存在两大问题，文件依赖和命名冲突。

![](/img/node/node08.jpg) 

## 4.2 生活中的模块化开发
![](/img/node/node09.jpg) 

## 4.3 软件中的模块化开发
> 一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。

![](/img/node/node10.jpg) 

## 4.4 Node.js中模块化开发规范
> Node.js规定一个JavaScript文件就是一个模块，模块内部定义的变量和函数默认情况下在外部无法得到
> 模块内部可以使用exports对象进行成员导出， 使用require方法导入其他模块。  

![](/img/node/node11.jpg) 

## 4.5 模块成员导出
	// a.js
	// 在模块内部定义变量
	let version = 1.0;
	// 在模块内部定义方法
	const sayHi = name => `您好, ${name}`;
	// 向模块外部导出数据 
	exports.version = version;
	exports.sayHi = sayHi;
- 03.module-a.js

		const add = (n1, n2) => n1 + n2;
		
		exports.add = add;
## 4.6 模块成员的导入
> 导入模块时后缀可以省略

	// b.js
	// 在b.js模块中导入模块a
	let a = require('./b.js');
	// 输出b模块中的version变量
	console.log(a.version);
	// 调用b模块中的sayHi方法 并输出其返回值
	console.log(a.sayHi('黑马讲师')); 
- 03.module-b.js  

		//const a = require('./03.module-a.js');
		const a = require('./03.module-a');
		console.log(a.add(10, 20));
+ 实例


- 04.module.exports.js


		const greeting = name => `hello ${name}`;
		const x = 100;
		exports.x = x;
		module.exports.greeting = greeting;
		// 当exports对象和moudle.exports对象指向的不是同一个对象时 以module.exports为准
		module.exports = {
			name: 'zhangsan'
		}
		
		exports = {
			age: 20
		}

- 04.require.js  

		const a = require('./04.module.exports.js');
		// console.log(a.greeting('zhangsan'));
		console.log(a);


## 4.7 模块成员导出的另一种方式
> exports是module.exports的别名(地址引用关系)，导出对象最终以module.exports为准

	module.exports.version = version;
	module.exports.sayHi = sayHi;

## 4.8 模块导出两种方式的联系与区别
	exports.version = version;
	module.exports.version = version;
	module.exports = { 
	    name: 'zhangsan',
	}
![](/img/node/node12.jpg) 

# 5. 系统模块
## 5.1 什么是系统模块
> Node运行环境提供的API. 因为这些API都是以模块化的方式进行开发的, 所以我们又称Node运行环境提供的API为系统模块

![](/img/node/node13.jpg) 
## 5.2 系统模块fs 文件操作
f：file 文件 ，s：system 系统，文件操作系统。  

+ 读取文件内容  

	- const fs = require('fs');  
	- fs.reaFile('文件路径/文件名称'[,'文件编码'], callback);  

			// 1.通过模块的名字fs对模块进行引用
			const fs = require('fs');
			
			// 2.通过模块内部的readFile读取文件内容
			fs.readFile('./01.helloworld.js', 'utf8', (err, doc) => {
				// 如果文件读取出错err 是一个对象 包含错误信息
				// 如果文件读取正确 err是 null
				// doc 是文件读取的结果
				console.log(err);
				console.log(doc);
			});
## 5.3 系统模块fs 文件操作
+ 写入文件内容  

- fs.writeFile('文件路径/文件名称', '数据', callback);
	
		const fs = require('fs');
		
		fs.writeFile('./demo.txt', '即将要写入的内容', err => {
			if (err != null) {
				console.log(err);
				return;
			}
		
			console.log('文件内容写入成功');
		})


## 5.4 系统模块path 路径操作
+ 为什么要进行路径拼接   
	- 不同操作系统的路径分隔符不统一  
	- /public/uploads/avatar  
	- Windows 上是 \   /  
	- Linux 上是 / 

			// public/uploads/avatar
			const path = require('path');
			
			const finalPath = path.join('public', 'uploads','avatar');
			
			console.log(finalPath);
## 5.5 路径拼接语法
	path.join('路径', '路径', ...)    
	// 导入path模块  	
	const path = require('path');  
	// 路径拼接	
	let finialPath = path.join('itcast', 'a', 'b', 'c.css');	
	// 输出结果 itcast\a\b\c.css	
	console.log(finialPath);	

	const fs = require('fs');
	const path = require('path');
	
	console.log(__dirname);
	console.log(path.join(__dirname, '01.helloworld.js'))
	
	fs.readFile(path.join(__dirname, '01.helloworld.js'), 'utf8', (err, doc) => {
		console.log(err)
		console.log(doc)
	});
## 5.6 相对路径VS绝对路径 
+ 大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录
+ 在读取文件或者设置文件路径时都会选择绝对路径
+ 使用__dirname获取当前文件所在的绝对路径

# 6. 第三方模块
## 6.1 什么是第三方模块
> 别人写好的、具有特定功能的、我们能直接使用的模块即第三方模块，由于第三方模块通常都是由多个文件组成并且被放置在一个文件夹中，所以又名包。

+ 第三方模块有两种存在形式：  
	- 以js文件的形式存在，提供实现项目具体功能的API接口。  
	- 以命令行工具形式存在，辅助项目开发  
## 6.2 获取第三方模块
> npmjs.com：第三方模块的存储和分发仓库

[npmjs](https://www.npmjs.com/)

## 6.3 获取第三方模块
> npm (node package manager) ： node的第三方模块管理工具  

+ 下载：npm install 模块名称  
+ 卸载：npm unintall package 模块名称  
+ 全局安装与本地安装  
	- 命令行工具：全局安装  
	- 库文件：本地安装  
## 6.4 第三方模块 nodemon
> nodemon是一个命令行工具，用以辅助项目开发。  
在Node.js中，每次修改文件都要在命令行工具中重新执行该文件，非常繁琐。  

+ 使用步骤  
	- 使用npm install nodemon –g 下载它  
	- 在命令行工具中用nodemon命令替代node命令执行文件  
![](/img/node/node14.jpg) 


## 6.5 第三方模块 nrm
> nrm ( npm registry manager )：npm下载地址切换工具  
> npm默认的下载地址在国外，国内下载速度慢  

+ 使用步骤  
	- 使用npm install nrm –g 下载它  
	- 查询可用下载地址列表 nrm ls  
	- 切换npm下载地址 nrm use 下载地址名称  

![](/img/node/node15.jpg) 

## 6.6 第三方模块 Gulp
> 基于node平台开发的前端构建工具  
将机械化操作编写成任务, 想要执行机械化操作时执行一个命令行命令任务就能自动执行了  
用机器代替手工，提高开发效率。  

## 6.7 Gulp能做什么
+ 项目上线，HTML、CSS、JS文件压缩合并
+ 语法转换（es6、less ...）
+ 公共文件抽离
+ 修改文件浏览器自动刷新

## 6.8 Gulp使用
1. 使用npm install gulp下载gulp库文件  
2. 在项目根目录下建立gulpfile.js文件  
3. 重构项目的文件夹结构 src目录放置源代码文件 dist目录放置构建后文件  
4. 在gulpfile.js文件中编写任务.  
5. 在命令行工具中执行gulp任务  

## 6.9 Gulp中提供的方法
+ gulp.src()：获取任务要处理的文件
+ gulp.dest()：输出文件
+ gulp.task()：建立gulp任务
+ gulp.watch()：监控文件的变化 	
 

		const gulp = require('gulp');
		// 使用gulp.task()方法建立任务
		gulp.task('first', () => {
		// 获取要处理的文件
			gulp.src('./src/css/base.css') 
			// 将处理后的文件输出到dist目录
		  	.pipe(gulp.dest('./dist/css'));
		});
## 6.10 Gulp插件
+ gulp-htmlmin ：html文件压缩
+ gulp-csso ：压缩css
+ gulp-babel ：JavaScript语法转化
+ gulp-less: less语法转化
+ gulp-uglify ：压缩混淆JavaScript
+ gulp-file-include 公共文件包含
+ browsersync 浏览器实时同步

