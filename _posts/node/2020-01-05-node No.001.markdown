---
layout:     post
title:      "Node No.001"
subtitle:   "Node No.001"
date:       2020-01-05 17:21:00
author:     "Yanding"
header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
tags:
    - Web
    - Web前端
    - Node
---
## 1. Node开发概述
### 1.1 为什么要学习服务器端开发基础
+ 能够和后端程序员更加紧密的配合
+ 网站业务逻辑前置，学习前端技术需要后端技术支撑（Ajax）
+ 扩宽知识视野，能够站在更高的角度审视整个项目

## 1.2 服务器端开发要做的事情
+ 实现网站的业务逻辑
+ 数据的增删改查

## 1.3 为什么选择Node
+ 使用JavaScript语法开发后端应用
+ 一些公司要求前端工程师掌握Node开发
+ 生态系统活跃，有大量开源库可以使用
+ 前端开发工具大多基于Node开发

## 1.4 Node是什么
>Node是一个基于Chrome V8引擎的JavaScript代码运行环境。
![](/img/node/node01.jpg)

- 运行环境
	- 浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境
	- Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境

# 2. Node运行环境搭建
## 2.1 Node.js运行环境安装 
> node官网 [node官网](https://nodejs.org/en/)

+ LTS = Long Term Support 长期支持版 稳定版
+ Current 拥有最新特性 实验版

![](/img/node/node02.jpg)

## 2.2 Node环境安装失败解决办法 
1. 错误代号2502、2503:

	+ 失败原因：系统帐户权限不足。  
	+ 解决办法：  
		<step 1>. 以管理员身份运行powershell命令行工具  
    	<step 2>. 输入运行安装包命令 msiexec /package node安装包位置  
![](/img/node/node03.jpg)  
2. 执行命令报错

	+ 失败原因：Node安装目录写入环境变量失败  
	+ 解决办法：将Node安装目录添加到环境变量中  
![](/img/node/node04.jpg) 

## 2.3 PATH环境变量
存储系统中的目录，在命令行中执行命令的时候系统会自动去这些目录中查找命令的位置。
![](/img/node/node05.jpg) 

# 3. Node.js快速入门
## 3.1 Node.js 的组成
+ JavaScript 由三部分组成，ECMAScript，DOM，BOM。
+ Node.js是由ECMAScript及Node 环境提供的一些附加API组成的，包括文件、网络、路径等等一些更加强大的 API。
![](/img/node/node06.jpg) 

## 3.2 Node.js基础语法
> 所有ECMAScript语法在Node环境中都可以使用。  
> 在Node环境下执行代码，使用Node命令执行后缀为.js的文件即可  
![](/img/node/node07.jpg) 


## 3.3 Node.js全局对象global
> 在浏览器中全局对象是window，在Node中全局对象是global。
> Node中全局对象下有以下方法，可以在任何地方使用，global可以省略。  
 
	console.log()     在控制台中输出
	setTimeout()     设置超时定时器
	clearTimeout()  清除超时时定时器
	setInterval()      设置间歇定时器
	clearInterval()   清除间歇定时器

# 4. Node.js模块化开发
## 4.1 JavaScript开发弊端

> JavaScript在使用时存在两大问题，文件依赖和命名冲突。

![](/img/node/node08.jpg) 

## 4.2 生活中的模块化开发
![](/img/node/node09.jpg) 

## 4.3 软件中的模块化开发
> 一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。

![](/img/node/node10.jpg) 

## 4.4 Node.js中模块化开发规范
> Node.js规定一个JavaScript文件就是一个模块，模块内部定义的变量和函数默认情况下在外部无法得到
> 模块内部可以使用exports对象进行成员导出， 使用require方法导入其他模块。  

![](/img/node/node11.jpg) 

## 4.5 模块成员导出
	// a.js
	// 在模块内部定义变量
	let version = 1.0;
	// 在模块内部定义方法
	const sayHi = name => `您好, ${name}`;
	// 向模块外部导出数据 
	exports.version = version;
	exports.sayHi = sayHi;
## 4.6 模块成员的导入
> 导入模块时后缀可以省略

	// b.js
	// 在b.js模块中导入模块a
	let a = require('./b.js');
	// 输出b模块中的version变量
	console.log(a.version);
	// 调用b模块中的sayHi方法 并输出其返回值
	console.log(a.sayHi('黑马讲师')); 

## 4.7 模块成员导出的另一种方式
> exports是module.exports的别名(地址引用关系)，导出对象最终以module.exports为准

	module.exports.version = version;
	module.exports.sayHi = sayHi;

## 4.8 模块导出两种方式的联系与区别
	exports.version = version;
	module.exports.version = version;
	module.exports = { 
	    name: 'zhangsan',
	}
![](/img/node/node12.jpg) 

# 5. 系统模块
## 5.1 什么是系统模块
> Node运行环境提供的API. 因为这些API都是以模块化的方式进行开发的, 所以我们又称Node运行环境提供的API为系统模块

![](/img/node/node13.jpg) 